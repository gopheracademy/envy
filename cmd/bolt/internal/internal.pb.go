// Code generated by protoc-gen-gogo.
// source: bolt/internal/internal.proto
// DO NOT EDIT!

/*
	Package internal is a generated protocol buffer package.

	It is generated from these files:
		bolt/internal/internal.proto

	It has these top-level messages:
		Student
		Course
*/
package internal

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Student struct {
	UID              *int64    `protobuf:"varint,1,opt,name=UID,json=uID" json:"UID,omitempty"`
	Username         *string   `protobuf:"bytes,2,opt,name=Username,json=username" json:"Username,omitempty"`
	Password         *string   `protobuf:"bytes,3,opt,name=Password,json=password" json:"Password,omitempty"`
	FullName         *string   `protobuf:"bytes,4,opt,name=FullName,json=fullName" json:"FullName,omitempty"`
	Email            *string   `protobuf:"bytes,5,opt,name=Email,json=email" json:"Email,omitempty"`
	HomeDirectory    *string   `protobuf:"bytes,6,opt,name=HomeDirectory,json=homeDirectory" json:"HomeDirectory,omitempty"`
	Courses          []*Course `protobuf:"bytes,7,rep,name=Courses,json=courses" json:"Courses,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Student) Reset()                    { *m = Student{} }
func (*Student) ProtoMessage()               {}
func (*Student) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

func (m *Student) GetUID() int64 {
	if m != nil && m.UID != nil {
		return *m.UID
	}
	return 0
}

func (m *Student) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *Student) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *Student) GetFullName() string {
	if m != nil && m.FullName != nil {
		return *m.FullName
	}
	return ""
}

func (m *Student) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Student) GetHomeDirectory() string {
	if m != nil && m.HomeDirectory != nil {
		return *m.HomeDirectory
	}
	return ""
}

func (m *Student) GetCourses() []*Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

type Course struct {
	ID               *int64  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Description      *string `protobuf:"bytes,3,opt,name=Description,json=description" json:"Description,omitempty"`
	Instructor       *string `protobuf:"bytes,4,opt,name=Instructor,json=instructor" json:"Instructor,omitempty"`
	InstructorEmail  *string `protobuf:"bytes,5,opt,name=InstructorEmail,json=instructorEmail" json:"InstructorEmail,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Course) Reset()                    { *m = Course{} }
func (*Course) ProtoMessage()               {}
func (*Course) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{1} }

func (m *Course) GetID() int64 {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return 0
}

func (m *Course) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Course) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Course) GetInstructor() string {
	if m != nil && m.Instructor != nil {
		return *m.Instructor
	}
	return ""
}

func (m *Course) GetInstructorEmail() string {
	if m != nil && m.InstructorEmail != nil {
		return *m.InstructorEmail
	}
	return ""
}

func init() {
	proto.RegisterType((*Student)(nil), "internal.Student")
	proto.RegisterType((*Course)(nil), "internal.Course")
}
func (this *Student) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Student)
	if !ok {
		that2, ok := that.(Student)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Student")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Student but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Student but is not nil && this == nil")
	}
	if this.UID != nil && that1.UID != nil {
		if *this.UID != *that1.UID {
			return fmt.Errorf("UID this(%v) Not Equal that(%v)", *this.UID, *that1.UID)
		}
	} else if this.UID != nil {
		return fmt.Errorf("this.UID == nil && that.UID != nil")
	} else if that1.UID != nil {
		return fmt.Errorf("UID this(%v) Not Equal that(%v)", this.UID, that1.UID)
	}
	if this.Username != nil && that1.Username != nil {
		if *this.Username != *that1.Username {
			return fmt.Errorf("Username this(%v) Not Equal that(%v)", *this.Username, *that1.Username)
		}
	} else if this.Username != nil {
		return fmt.Errorf("this.Username == nil && that.Username != nil")
	} else if that1.Username != nil {
		return fmt.Errorf("Username this(%v) Not Equal that(%v)", this.Username, that1.Username)
	}
	if this.Password != nil && that1.Password != nil {
		if *this.Password != *that1.Password {
			return fmt.Errorf("Password this(%v) Not Equal that(%v)", *this.Password, *that1.Password)
		}
	} else if this.Password != nil {
		return fmt.Errorf("this.Password == nil && that.Password != nil")
	} else if that1.Password != nil {
		return fmt.Errorf("Password this(%v) Not Equal that(%v)", this.Password, that1.Password)
	}
	if this.FullName != nil && that1.FullName != nil {
		if *this.FullName != *that1.FullName {
			return fmt.Errorf("FullName this(%v) Not Equal that(%v)", *this.FullName, *that1.FullName)
		}
	} else if this.FullName != nil {
		return fmt.Errorf("this.FullName == nil && that.FullName != nil")
	} else if that1.FullName != nil {
		return fmt.Errorf("FullName this(%v) Not Equal that(%v)", this.FullName, that1.FullName)
	}
	if this.Email != nil && that1.Email != nil {
		if *this.Email != *that1.Email {
			return fmt.Errorf("Email this(%v) Not Equal that(%v)", *this.Email, *that1.Email)
		}
	} else if this.Email != nil {
		return fmt.Errorf("this.Email == nil && that.Email != nil")
	} else if that1.Email != nil {
		return fmt.Errorf("Email this(%v) Not Equal that(%v)", this.Email, that1.Email)
	}
	if this.HomeDirectory != nil && that1.HomeDirectory != nil {
		if *this.HomeDirectory != *that1.HomeDirectory {
			return fmt.Errorf("HomeDirectory this(%v) Not Equal that(%v)", *this.HomeDirectory, *that1.HomeDirectory)
		}
	} else if this.HomeDirectory != nil {
		return fmt.Errorf("this.HomeDirectory == nil && that.HomeDirectory != nil")
	} else if that1.HomeDirectory != nil {
		return fmt.Errorf("HomeDirectory this(%v) Not Equal that(%v)", this.HomeDirectory, that1.HomeDirectory)
	}
	if len(this.Courses) != len(that1.Courses) {
		return fmt.Errorf("Courses this(%v) Not Equal that(%v)", len(this.Courses), len(that1.Courses))
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return fmt.Errorf("Courses this[%v](%v) Not Equal that[%v](%v)", i, this.Courses[i], i, that1.Courses[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Student) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Student)
	if !ok {
		that2, ok := that.(Student)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UID != nil && that1.UID != nil {
		if *this.UID != *that1.UID {
			return false
		}
	} else if this.UID != nil {
		return false
	} else if that1.UID != nil {
		return false
	}
	if this.Username != nil && that1.Username != nil {
		if *this.Username != *that1.Username {
			return false
		}
	} else if this.Username != nil {
		return false
	} else if that1.Username != nil {
		return false
	}
	if this.Password != nil && that1.Password != nil {
		if *this.Password != *that1.Password {
			return false
		}
	} else if this.Password != nil {
		return false
	} else if that1.Password != nil {
		return false
	}
	if this.FullName != nil && that1.FullName != nil {
		if *this.FullName != *that1.FullName {
			return false
		}
	} else if this.FullName != nil {
		return false
	} else if that1.FullName != nil {
		return false
	}
	if this.Email != nil && that1.Email != nil {
		if *this.Email != *that1.Email {
			return false
		}
	} else if this.Email != nil {
		return false
	} else if that1.Email != nil {
		return false
	}
	if this.HomeDirectory != nil && that1.HomeDirectory != nil {
		if *this.HomeDirectory != *that1.HomeDirectory {
			return false
		}
	} else if this.HomeDirectory != nil {
		return false
	} else if that1.HomeDirectory != nil {
		return false
	}
	if len(this.Courses) != len(that1.Courses) {
		return false
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Course) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Course)
	if !ok {
		that2, ok := that.(Course)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Course")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Course but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Course but is not nil && this == nil")
	}
	if this.ID != nil && that1.ID != nil {
		if *this.ID != *that1.ID {
			return fmt.Errorf("ID this(%v) Not Equal that(%v)", *this.ID, *that1.ID)
		}
	} else if this.ID != nil {
		return fmt.Errorf("this.ID == nil && that.ID != nil")
	} else if that1.ID != nil {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return fmt.Errorf("Name this(%v) Not Equal that(%v)", *this.Name, *that1.Name)
		}
	} else if this.Name != nil {
		return fmt.Errorf("this.Name == nil && that.Name != nil")
	} else if that1.Name != nil {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Description != nil && that1.Description != nil {
		if *this.Description != *that1.Description {
			return fmt.Errorf("Description this(%v) Not Equal that(%v)", *this.Description, *that1.Description)
		}
	} else if this.Description != nil {
		return fmt.Errorf("this.Description == nil && that.Description != nil")
	} else if that1.Description != nil {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.Instructor != nil && that1.Instructor != nil {
		if *this.Instructor != *that1.Instructor {
			return fmt.Errorf("Instructor this(%v) Not Equal that(%v)", *this.Instructor, *that1.Instructor)
		}
	} else if this.Instructor != nil {
		return fmt.Errorf("this.Instructor == nil && that.Instructor != nil")
	} else if that1.Instructor != nil {
		return fmt.Errorf("Instructor this(%v) Not Equal that(%v)", this.Instructor, that1.Instructor)
	}
	if this.InstructorEmail != nil && that1.InstructorEmail != nil {
		if *this.InstructorEmail != *that1.InstructorEmail {
			return fmt.Errorf("InstructorEmail this(%v) Not Equal that(%v)", *this.InstructorEmail, *that1.InstructorEmail)
		}
	} else if this.InstructorEmail != nil {
		return fmt.Errorf("this.InstructorEmail == nil && that.InstructorEmail != nil")
	} else if that1.InstructorEmail != nil {
		return fmt.Errorf("InstructorEmail this(%v) Not Equal that(%v)", this.InstructorEmail, that1.InstructorEmail)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Course) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Course)
	if !ok {
		that2, ok := that.(Course)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ID != nil && that1.ID != nil {
		if *this.ID != *that1.ID {
			return false
		}
	} else if this.ID != nil {
		return false
	} else if that1.ID != nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.Description != nil && that1.Description != nil {
		if *this.Description != *that1.Description {
			return false
		}
	} else if this.Description != nil {
		return false
	} else if that1.Description != nil {
		return false
	}
	if this.Instructor != nil && that1.Instructor != nil {
		if *this.Instructor != *that1.Instructor {
			return false
		}
	} else if this.Instructor != nil {
		return false
	} else if that1.Instructor != nil {
		return false
	}
	if this.InstructorEmail != nil && that1.InstructorEmail != nil {
		if *this.InstructorEmail != *that1.InstructorEmail {
			return false
		}
	} else if this.InstructorEmail != nil {
		return false
	} else if that1.InstructorEmail != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Student) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&internal.Student{")
	if this.UID != nil {
		s = append(s, "UID: "+valueToGoStringInternal(this.UID, "int64")+",\n")
	}
	if this.Username != nil {
		s = append(s, "Username: "+valueToGoStringInternal(this.Username, "string")+",\n")
	}
	if this.Password != nil {
		s = append(s, "Password: "+valueToGoStringInternal(this.Password, "string")+",\n")
	}
	if this.FullName != nil {
		s = append(s, "FullName: "+valueToGoStringInternal(this.FullName, "string")+",\n")
	}
	if this.Email != nil {
		s = append(s, "Email: "+valueToGoStringInternal(this.Email, "string")+",\n")
	}
	if this.HomeDirectory != nil {
		s = append(s, "HomeDirectory: "+valueToGoStringInternal(this.HomeDirectory, "string")+",\n")
	}
	if this.Courses != nil {
		s = append(s, "Courses: "+fmt.Sprintf("%#v", this.Courses)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Course) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&internal.Course{")
	if this.ID != nil {
		s = append(s, "ID: "+valueToGoStringInternal(this.ID, "int64")+",\n")
	}
	if this.Name != nil {
		s = append(s, "Name: "+valueToGoStringInternal(this.Name, "string")+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+valueToGoStringInternal(this.Description, "string")+",\n")
	}
	if this.Instructor != nil {
		s = append(s, "Instructor: "+valueToGoStringInternal(this.Instructor, "string")+",\n")
	}
	if this.InstructorEmail != nil {
		s = append(s, "InstructorEmail: "+valueToGoStringInternal(this.InstructorEmail, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInternal(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringInternal(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *Student) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Student) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintInternal(data, i, uint64(*m.UID))
	}
	if m.Username != nil {
		data[i] = 0x12
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.Username)))
		i += copy(data[i:], *m.Username)
	}
	if m.Password != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.Password)))
		i += copy(data[i:], *m.Password)
	}
	if m.FullName != nil {
		data[i] = 0x22
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.FullName)))
		i += copy(data[i:], *m.FullName)
	}
	if m.Email != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.Email)))
		i += copy(data[i:], *m.Email)
	}
	if m.HomeDirectory != nil {
		data[i] = 0x32
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.HomeDirectory)))
		i += copy(data[i:], *m.HomeDirectory)
	}
	if len(m.Courses) > 0 {
		for _, msg := range m.Courses {
			data[i] = 0x3a
			i++
			i = encodeVarintInternal(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Course) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Course) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintInternal(data, i, uint64(*m.ID))
	}
	if m.Name != nil {
		data[i] = 0x12
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.Name)))
		i += copy(data[i:], *m.Name)
	}
	if m.Description != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.Description)))
		i += copy(data[i:], *m.Description)
	}
	if m.Instructor != nil {
		data[i] = 0x22
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.Instructor)))
		i += copy(data[i:], *m.Instructor)
	}
	if m.InstructorEmail != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintInternal(data, i, uint64(len(*m.InstructorEmail)))
		i += copy(data[i:], *m.InstructorEmail)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Internal(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Internal(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintInternal(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedStudent(r randyInternal, easy bool) *Student {
	this := &Student{}
	if r.Intn(10) != 0 {
		v1 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.UID = &v1
	}
	if r.Intn(10) != 0 {
		v2 := randStringInternal(r)
		this.Username = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringInternal(r)
		this.Password = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringInternal(r)
		this.FullName = &v4
	}
	if r.Intn(10) != 0 {
		v5 := randStringInternal(r)
		this.Email = &v5
	}
	if r.Intn(10) != 0 {
		v6 := randStringInternal(r)
		this.HomeDirectory = &v6
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Courses = make([]*Course, v7)
		for i := 0; i < v7; i++ {
			this.Courses[i] = NewPopulatedCourse(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedInternal(r, 8)
	}
	return this
}

func NewPopulatedCourse(r randyInternal, easy bool) *Course {
	this := &Course{}
	if r.Intn(10) != 0 {
		v8 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		this.ID = &v8
	}
	if r.Intn(10) != 0 {
		v9 := randStringInternal(r)
		this.Name = &v9
	}
	if r.Intn(10) != 0 {
		v10 := randStringInternal(r)
		this.Description = &v10
	}
	if r.Intn(10) != 0 {
		v11 := randStringInternal(r)
		this.Instructor = &v11
	}
	if r.Intn(10) != 0 {
		v12 := randStringInternal(r)
		this.InstructorEmail = &v12
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedInternal(r, 6)
	}
	return this
}

type randyInternal interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneInternal(r randyInternal) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringInternal(r randyInternal) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneInternal(r)
	}
	return string(tmps)
}
func randUnrecognizedInternal(r randyInternal, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldInternal(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldInternal(data []byte, r randyInternal, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateInternal(data, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		data = encodeVarintPopulateInternal(data, uint64(v14))
	case 1:
		data = encodeVarintPopulateInternal(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateInternal(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateInternal(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateInternal(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateInternal(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Student) Size() (n int) {
	var l int
	_ = l
	if m.UID != nil {
		n += 1 + sovInternal(uint64(*m.UID))
	}
	if m.Username != nil {
		l = len(*m.Username)
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Password != nil {
		l = len(*m.Password)
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.FullName != nil {
		l = len(*m.FullName)
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Email != nil {
		l = len(*m.Email)
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.HomeDirectory != nil {
		l = len(*m.HomeDirectory)
		n += 1 + l + sovInternal(uint64(l))
	}
	if len(m.Courses) > 0 {
		for _, e := range m.Courses {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Course) Size() (n int) {
	var l int
	_ = l
	if m.ID != nil {
		n += 1 + sovInternal(uint64(*m.ID))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Description != nil {
		l = len(*m.Description)
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Instructor != nil {
		l = len(*m.Instructor)
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.InstructorEmail != nil {
		l = len(*m.InstructorEmail)
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Student) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Student{`,
		`UID:` + valueToStringInternal(this.UID) + `,`,
		`Username:` + valueToStringInternal(this.Username) + `,`,
		`Password:` + valueToStringInternal(this.Password) + `,`,
		`FullName:` + valueToStringInternal(this.FullName) + `,`,
		`Email:` + valueToStringInternal(this.Email) + `,`,
		`HomeDirectory:` + valueToStringInternal(this.HomeDirectory) + `,`,
		`Courses:` + strings.Replace(fmt.Sprintf("%v", this.Courses), "Course", "Course", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Course) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Course{`,
		`ID:` + valueToStringInternal(this.ID) + `,`,
		`Name:` + valueToStringInternal(this.Name) + `,`,
		`Description:` + valueToStringInternal(this.Description) + `,`,
		`Instructor:` + valueToStringInternal(this.Instructor) + `,`,
		`InstructorEmail:` + valueToStringInternal(this.InstructorEmail) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInternal(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Student) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Student: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Student: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Username = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Password = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.FullName = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Email = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeDirectory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.HomeDirectory = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, &Course{})
			if err := m.Courses[len(m.Courses)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Course) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Course: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Course: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Description = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.Instructor = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstructorEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.InstructorEmail = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternal(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bolt/internal/internal.proto", fileDescriptorInternal) }

var fileDescriptorInternal = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0xef, 0xa1, 0x40, 0xb9, 0x87, 0x70, 0x21, 0x93, 0xbb, 0x68, 0xc8, 0xcd, 0xa4, 0x21,
	0x77, 0xd1, 0x18, 0x85, 0xc4, 0x47, 0xd0, 0x6a, 0x64, 0x43, 0x0c, 0x86, 0x07, 0x80, 0x32, 0xc0,
	0x24, 0x6d, 0x87, 0x4c, 0x67, 0x62, 0xdc, 0xf9, 0x18, 0x3e, 0x82, 0x8f, 0xe0, 0xd2, 0xa5, 0x4b,
	0x77, 0xba, 0xa4, 0x7d, 0x02, 0x97, 0x2e, 0x4d, 0xa7, 0xb5, 0xe0, 0xee, 0x7c, 0xff, 0x77, 0x4e,
	0xd3, 0x7f, 0xf0, 0xdf, 0x42, 0x84, 0x6a, 0xc4, 0x63, 0xc5, 0x64, 0x3c, 0x0f, 0xab, 0x61, 0xb8,
	0x95, 0x42, 0x09, 0xd2, 0xfa, 0xe6, 0xfe, 0xc9, 0x9a, 0xab, 0x8d, 0x5e, 0x0c, 0x03, 0x11, 0x8d,
	0xd6, 0x62, 0x2d, 0x46, 0x66, 0x61, 0xa1, 0x57, 0x86, 0x0c, 0x98, 0xa9, 0x38, 0x1c, 0xbc, 0x01,
	0xda, 0x37, 0x4a, 0x2f, 0x59, 0xac, 0x48, 0x0f, 0xad, 0xd9, 0xd8, 0x77, 0xc0, 0x05, 0xcf, 0x9a,
	0x5a, 0x7a, 0xec, 0x93, 0x3e, 0xb6, 0x66, 0x49, 0xfe, 0xdd, 0x88, 0x39, 0x35, 0x17, 0xbc, 0xdf,
	0xd3, 0x96, 0x2e, 0x39, 0x77, 0xd7, 0xf3, 0x24, 0xb9, 0x15, 0x72, 0xe9, 0x58, 0x85, 0xdb, 0x96,
	0x9c, 0xbb, 0x4b, 0x1d, 0x86, 0x93, 0xfc, 0xae, 0x5e, 0xb8, 0x55, 0xc9, 0xe4, 0x2f, 0x36, 0x2e,
	0xa2, 0x39, 0x0f, 0x9d, 0x86, 0x11, 0x0d, 0x96, 0x03, 0xf9, 0x8f, 0x9d, 0x2b, 0x11, 0x31, 0x9f,
	0x4b, 0x16, 0x28, 0x21, 0xef, 0x9c, 0xa6, 0xb1, 0x9d, 0xcd, 0x61, 0x48, 0x8e, 0xd0, 0x3e, 0x17,
	0x5a, 0x26, 0x2c, 0x71, 0x6c, 0xd7, 0xf2, 0xda, 0xa7, 0xbd, 0x61, 0xf5, 0x10, 0x85, 0x98, 0xda,
	0x41, 0xb1, 0x30, 0x78, 0x00, 0x6c, 0x16, 0x19, 0xf9, 0x83, 0xb5, 0xaa, 0x57, 0x8d, 0xfb, 0x84,
	0x60, 0x7d, 0xb2, 0xaf, 0x54, 0x37, 0x75, 0x5c, 0x6c, 0xfb, 0x2c, 0x09, 0x24, 0xdf, 0x2a, 0x2e,
	0xe2, 0xb2, 0x51, 0x7b, 0xb9, 0x8f, 0x08, 0x45, 0x1c, 0xc7, 0x89, 0x92, 0x3a, 0xff, 0x97, 0xb2,
	0x16, 0xf2, 0x2a, 0x21, 0x1e, 0x76, 0xf7, 0xfe, 0xb0, 0x62, 0x97, 0xff, 0x8c, 0xcf, 0x8e, 0xdf,
	0x53, 0xfa, 0x6b, 0x97, 0x52, 0xf8, 0x48, 0x29, 0x7c, 0xa6, 0x14, 0xee, 0x33, 0x0a, 0x8f, 0x19,
	0x85, 0xa7, 0x8c, 0xc2, 0x73, 0x46, 0xe1, 0x25, 0xa3, 0xf0, 0x9a, 0x51, 0xd8, 0x65, 0x14, 0xbe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x15, 0x3b, 0x3a, 0x4e, 0xfa, 0x01, 0x00, 0x00,
}
